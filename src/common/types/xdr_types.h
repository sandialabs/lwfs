/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _XDR_TYPES_H_RPCGEN
#define _XDR_TYPES_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include "config.h"
#include "lwfs_int.h"

#ifdef BROKEN_DARWIN_RPCGEN

extern bool_t xdr_uint32_t (XDR* x, uint32_t* ii);
extern bool_t xdr_uint64_t (XDR* x, uint64_t* ii);

#endif

enum lwfs_return_code {
	LWFS_OK = 0,
	LWFS_ERR = 0 + 1,
	LWFS_ERR_TIMEDOUT = 0 + 2,
	LWFS_ERR_NOTSUPP = 0 + 3,
	LWFS_ERR_NOSPACE = 0 + 4,
	LWFS_ERR_STORAGE = 0 + 5,
	LWFS_ERR_NO_OBJ = 0 + 6,
	LWFS_ERR_NAMING = 0 + 7,
	LWFS_ERR_PERM = 0 + 8,
	LWFS_ERR_NOENT = 0 + 9,
	LWFS_ERR_ACCESS = 0 + 10,
	LWFS_ERR_EXIST = 0 + 11,
	LWFS_ERR_NOTDIR = 0 + 12,
	LWFS_ERR_NOTFILE = 0 + 13,
	LWFS_ERR_NOTNS = 0 + 14,
	LWFS_ERR_ISDIR = 0 + 15,
	LWFS_ERR_RPC = 0 + 16,
	LWFS_ERR_ENCODE = 0 + 17,
	LWFS_ERR_DECODE = 0 + 18,
	LWFS_ERR_SEC = 0 + 19,
	LWFS_ERR_GENKEY = 0 + 20,
	LWFS_ERR_VERIFYCRED = 0 + 21,
	LWFS_ERR_VERIFYCAP = 0 + 22,
	LWFS_ERR_LOCK_EXISTS = 0 + 23,
	LWFS_ERR_NO_LOCK = 0 + 24,
	LWFS_ERR_TXN = 0 + 25,
};
typedef enum lwfs_return_code lwfs_return_code;
#define LWFS_UUIDSIZE 16

typedef int lwfs_bool;

typedef uint64_t lwfs_size;

typedef uint64_t lwfs_ssize;

typedef uint64_t lwfs_thread;

struct lwfs_time {
	uint32_t seconds;
	uint32_t nseconds;
};
typedef struct lwfs_time lwfs_time;

typedef char lwfs_uuid[LWFS_UUIDSIZE];

typedef lwfs_uuid lwfs_uid;

struct lwfs_uid_list {
	lwfs_uid uid;
	struct lwfs_uid_list *next;
};
typedef struct lwfs_uid_list lwfs_uid_list;

typedef struct {
	u_int lwfs_uid_array_len;
	lwfs_uid *lwfs_uid_array_val;
} lwfs_uid_array;

typedef lwfs_uid_list *lwfs_uid_list_ptr;
#define LWFS_OP_LEN 16

typedef char lwfs_opstr[LWFS_OP_LEN];
#define NUM_CONTAINER_OPS 6

enum lwfs_container_op {
	LWFS_CONTAINER_CREATE = 1,
	LWFS_CONTAINER_MODACL = 2,
	LWFS_CONTAINER_REMOVE = 4,
	LWFS_CONTAINER_READ = 8,
	LWFS_CONTAINER_WRITE = 16,
	LWFS_CONTAINER_EXEC = 32,
};
typedef enum lwfs_container_op lwfs_container_op;

typedef uint32_t lwfs_opcode;
#define LWFS_OP_NULL 0
#define LWFS_NAME_LEN 64

typedef char *lwfs_name;

typedef struct {
	u_int lwfs_name_array_len;
	lwfs_name *lwfs_name_array_val;
} lwfs_name_array;

struct lwfs_acl {
	lwfs_opcode opcode;
	lwfs_uid_list *users;
};
typedef struct lwfs_acl lwfs_acl;

struct lwfs_opcode_list {
	lwfs_opcode opcode;
	struct lwfs_opcode_list *next;
};
typedef struct lwfs_opcode_list lwfs_opcode_list;

typedef struct {
	u_int lwfs_opcode_array_len;
	lwfs_opcode *lwfs_opcode_array_val;
} lwfs_opcode_array;

typedef lwfs_opcode_list *lwfs_opcode_list_ptr;

typedef uint64_t lwfs_cid;
#define LWFS_CID_ANY -1

struct lwfs_stat_data {
	lwfs_time atime;
	lwfs_time mtime;
	lwfs_time ctime;
	lwfs_size size;
};
typedef struct lwfs_stat_data lwfs_stat_data;

typedef lwfs_uuid lwfs_oid;

typedef uint32_t lwfs_vid;

typedef uint32_t lwfs_nid;

typedef uint32_t lwfs_pid;

struct lwfs_remote_pid {
	lwfs_nid nid;
	lwfs_pid pid;
};
typedef struct lwfs_remote_pid lwfs_remote_pid;

typedef uint32_t lwfs_lock_id;

enum lwfs_lock_type {
	LWFS_LOCK_NULL = 0,
	LWFS_READ_LOCK = 0 + 1,
	LWFS_WRITE_LOCK = 0 + 2,
};
typedef enum lwfs_lock_type lwfs_lock_type;

typedef uint64_t lwfs_match_bits;

typedef uint32_t lwfs_buffer_id;

struct lwfs_rma {
	lwfs_remote_pid match_id;
	lwfs_buffer_id buffer_id;
	lwfs_size offset;
	lwfs_match_bits match_bits;
	lwfs_size len;
	uint64_t local_buf;
};
typedef struct lwfs_rma lwfs_rma;
#define MAX_SVC_THREADS 1

enum lwfs_rpc_transport {
	LWFS_RPC_PTL = 0,
	LWFS_RPC_LOCAL = 1,
};
typedef enum lwfs_rpc_transport lwfs_rpc_transport;
#define LWFS_TRANSPORT_DEFAULT LWFS_RPC_PTL

enum lwfs_rpc_encode {
	LWFS_RPC_XDR = 0,
};
typedef enum lwfs_rpc_encode lwfs_rpc_encode;
#define LWFS_ENCODE_DEFAULT LWFS_RPC_XDR

struct lwfs_service {
	lwfs_rpc_encode rpc_encode;
	lwfs_rma req_addr;
	int max_reqs;
	lwfs_thread req_thread;
	lwfs_thread thread_pool[MAX_SVC_THREADS];
};
typedef struct lwfs_service lwfs_service;

struct lwfs_obj {
	lwfs_service svc;
	int type;
	lwfs_cid cid;
	lwfs_oid oid;
	lwfs_lock_id lock_id;
};
typedef struct lwfs_obj lwfs_obj;

struct lwfs_txn {
	lwfs_obj journal;
};
typedef struct lwfs_txn lwfs_txn;

struct lwfs_distributed_obj {
	int chunk_size;
	int ss_obj_count;
	lwfs_obj *ss_obj;
};
typedef struct lwfs_distributed_obj lwfs_distributed_obj;

struct lwfs_ns_entry {
	char name[LWFS_NAME_LEN];
	lwfs_oid dirent_oid;
	lwfs_oid inode_oid;
	lwfs_oid parent_oid;
	int link_cnt;
	lwfs_obj entry_obj;
	lwfs_obj *file_obj;
	lwfs_distributed_obj *d_obj;
};
typedef struct lwfs_ns_entry lwfs_ns_entry;

typedef struct {
	u_int lwfs_ns_entry_array_len;
	lwfs_ns_entry *lwfs_ns_entry_array_val;
} lwfs_ns_entry_array;

struct lwfs_namespace {
	char name[LWFS_NAME_LEN];
	lwfs_ns_entry ns_entry;
};
typedef struct lwfs_namespace lwfs_namespace;

typedef struct {
	u_int lwfs_namespace_array_len;
	lwfs_namespace *lwfs_namespace_array_val;
} lwfs_namespace_array;

enum lwfs_entry_type {
	LWFS_GENERIC_OBJ = 0,
	LWFS_FILE_ENTRY = 0 + 1,
	LWFS_DIR_ENTRY = 0 + 2,
	LWFS_LINK_ENTRY = 0 + 3,
	LWFS_FILE_OBJ = 0 + 4,
	LWFS_SEG_OBJ = 0 + 5,
	LWFS_NS_OBJ = 0 + 6,
};
typedef enum lwfs_entry_type lwfs_entry_type;

enum lwfs_pt_indices {
	LWFS_REQ_PT_INDEX = 1,
	LWFS_RES_PT_INDEX = 1 + 1,
	LWFS_DATA_PT_INDEX = 1 + 2,
	LWFS_LONG_ARGS_PT_INDEX = 1 + 3,
	LWFS_LONG_RES_PT_INDEX = 1 + 4,
};
typedef enum lwfs_pt_indices lwfs_pt_indices;
#define LWFS_SHORT_REQUEST_SIZE 512
#define LWFS_SHORT_RESULT_SIZE 512
#define LWFS_SS_PID 122
#define LWFS_SS_MATCH_BITS 0
#define LWFS_AUTHR_PID 124
#define LWFS_AUTHR_MATCH_BITS 0
#define LWFS_NAMING_PID 126
#define LWFS_NAMING_MATCH_BITS 0

struct lwfs_request_header {
	u_long id;
	lwfs_opcode opcode;
	lwfs_bool fetch_args;
	lwfs_rma args_addr;
	lwfs_rma data_addr;
	lwfs_rma res_addr;
};
typedef struct lwfs_request_header lwfs_request_header;

struct lwfs_result_header {
	u_long id;
	lwfs_bool fetch_result;
	lwfs_rma result_addr;
	int rc;
};
typedef struct lwfs_result_header lwfs_result_header;
#define LWFS_KEYSIZE 16

typedef char lwfs_key[LWFS_KEYSIZE];
#define LWFS_MACSIZE 20

typedef char lwfs_mac[LWFS_MACSIZE];

struct lwfs_cred_data {
	lwfs_uid uid;
};
typedef struct lwfs_cred_data lwfs_cred_data;

struct lwfs_cred {
	lwfs_cred_data data;
	lwfs_mac mac;
};
typedef struct lwfs_cred lwfs_cred;

struct lwfs_cap_data {
	lwfs_cid cid;
	lwfs_container_op container_op;
	lwfs_cred cred;
};
typedef struct lwfs_cap_data lwfs_cap_data;

struct lwfs_cap {
	lwfs_cap_data data;
	lwfs_mac mac;
};
typedef struct lwfs_cap lwfs_cap;

typedef struct {
	u_int lwfs_cap_array_len;
	lwfs_cap *lwfs_cap_array_val;
} lwfs_cap_array;

struct lwfs_cap_list {
	lwfs_cap cap;
	struct lwfs_cap_list *next;
};
typedef struct lwfs_cap_list lwfs_cap_list;

typedef lwfs_cap_list *lwfs_cap_list_ptr;
#define LWFS_ATTR_SIZE 8192

typedef struct {
	u_int lwfs_attr_data_len;
	char *lwfs_attr_data_val;
} lwfs_attr_data;

struct lwfs_attr {
	lwfs_name name;
	lwfs_attr_data value;
};
typedef struct lwfs_attr lwfs_attr;

typedef struct {
	u_int lwfs_attr_array_len;
	lwfs_attr *lwfs_attr_array_val;
} lwfs_attr_array;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_lwfs_return_code (XDR *, lwfs_return_code*);
extern  bool_t xdr_lwfs_bool (XDR *, lwfs_bool*);
extern  bool_t xdr_lwfs_size (XDR *, lwfs_size*);
extern  bool_t xdr_lwfs_ssize (XDR *, lwfs_ssize*);
extern  bool_t xdr_lwfs_thread (XDR *, lwfs_thread*);
extern  bool_t xdr_lwfs_time (XDR *, lwfs_time*);
extern  bool_t xdr_lwfs_uuid (XDR *, lwfs_uuid);
extern  bool_t xdr_lwfs_uid (XDR *, lwfs_uid);
extern  bool_t xdr_lwfs_uid_list (XDR *, lwfs_uid_list*);
extern  bool_t xdr_lwfs_uid_array (XDR *, lwfs_uid_array*);
extern  bool_t xdr_lwfs_uid_list_ptr (XDR *, lwfs_uid_list_ptr*);
extern  bool_t xdr_lwfs_opstr (XDR *, lwfs_opstr);
extern  bool_t xdr_lwfs_container_op (XDR *, lwfs_container_op*);
extern  bool_t xdr_lwfs_opcode (XDR *, lwfs_opcode*);
extern  bool_t xdr_lwfs_name (XDR *, lwfs_name*);
extern  bool_t xdr_lwfs_name_array (XDR *, lwfs_name_array*);
extern  bool_t xdr_lwfs_acl (XDR *, lwfs_acl*);
extern  bool_t xdr_lwfs_opcode_list (XDR *, lwfs_opcode_list*);
extern  bool_t xdr_lwfs_opcode_array (XDR *, lwfs_opcode_array*);
extern  bool_t xdr_lwfs_opcode_list_ptr (XDR *, lwfs_opcode_list_ptr*);
extern  bool_t xdr_lwfs_cid (XDR *, lwfs_cid*);
extern  bool_t xdr_lwfs_stat_data (XDR *, lwfs_stat_data*);
extern  bool_t xdr_lwfs_oid (XDR *, lwfs_oid);
extern  bool_t xdr_lwfs_vid (XDR *, lwfs_vid*);
extern  bool_t xdr_lwfs_nid (XDR *, lwfs_nid*);
extern  bool_t xdr_lwfs_pid (XDR *, lwfs_pid*);
extern  bool_t xdr_lwfs_remote_pid (XDR *, lwfs_remote_pid*);
extern  bool_t xdr_lwfs_lock_id (XDR *, lwfs_lock_id*);
extern  bool_t xdr_lwfs_lock_type (XDR *, lwfs_lock_type*);
extern  bool_t xdr_lwfs_match_bits (XDR *, lwfs_match_bits*);
extern  bool_t xdr_lwfs_buffer_id (XDR *, lwfs_buffer_id*);
extern  bool_t xdr_lwfs_rma (XDR *, lwfs_rma*);
extern  bool_t xdr_lwfs_rpc_transport (XDR *, lwfs_rpc_transport*);
extern  bool_t xdr_lwfs_rpc_encode (XDR *, lwfs_rpc_encode*);
extern  bool_t xdr_lwfs_service (XDR *, lwfs_service*);
extern  bool_t xdr_lwfs_obj (XDR *, lwfs_obj*);
extern  bool_t xdr_lwfs_txn (XDR *, lwfs_txn*);
extern  bool_t xdr_lwfs_distributed_obj (XDR *, lwfs_distributed_obj*);
extern  bool_t xdr_lwfs_ns_entry (XDR *, lwfs_ns_entry*);
extern  bool_t xdr_lwfs_ns_entry_array (XDR *, lwfs_ns_entry_array*);
extern  bool_t xdr_lwfs_namespace (XDR *, lwfs_namespace*);
extern  bool_t xdr_lwfs_namespace_array (XDR *, lwfs_namespace_array*);
extern  bool_t xdr_lwfs_entry_type (XDR *, lwfs_entry_type*);
extern  bool_t xdr_lwfs_pt_indices (XDR *, lwfs_pt_indices*);
extern  bool_t xdr_lwfs_request_header (XDR *, lwfs_request_header*);
extern  bool_t xdr_lwfs_result_header (XDR *, lwfs_result_header*);
extern  bool_t xdr_lwfs_key (XDR *, lwfs_key);
extern  bool_t xdr_lwfs_mac (XDR *, lwfs_mac);
extern  bool_t xdr_lwfs_cred_data (XDR *, lwfs_cred_data*);
extern  bool_t xdr_lwfs_cred (XDR *, lwfs_cred*);
extern  bool_t xdr_lwfs_cap_data (XDR *, lwfs_cap_data*);
extern  bool_t xdr_lwfs_cap (XDR *, lwfs_cap*);
extern  bool_t xdr_lwfs_cap_array (XDR *, lwfs_cap_array*);
extern  bool_t xdr_lwfs_cap_list (XDR *, lwfs_cap_list*);
extern  bool_t xdr_lwfs_cap_list_ptr (XDR *, lwfs_cap_list_ptr*);
extern  bool_t xdr_lwfs_attr_data (XDR *, lwfs_attr_data*);
extern  bool_t xdr_lwfs_attr (XDR *, lwfs_attr*);
extern  bool_t xdr_lwfs_attr_array (XDR *, lwfs_attr_array*);

#else /* K&R C */
extern bool_t xdr_lwfs_return_code ();
extern bool_t xdr_lwfs_bool ();
extern bool_t xdr_lwfs_size ();
extern bool_t xdr_lwfs_ssize ();
extern bool_t xdr_lwfs_thread ();
extern bool_t xdr_lwfs_time ();
extern bool_t xdr_lwfs_uuid ();
extern bool_t xdr_lwfs_uid ();
extern bool_t xdr_lwfs_uid_list ();
extern bool_t xdr_lwfs_uid_array ();
extern bool_t xdr_lwfs_uid_list_ptr ();
extern bool_t xdr_lwfs_opstr ();
extern bool_t xdr_lwfs_container_op ();
extern bool_t xdr_lwfs_opcode ();
extern bool_t xdr_lwfs_name ();
extern bool_t xdr_lwfs_name_array ();
extern bool_t xdr_lwfs_acl ();
extern bool_t xdr_lwfs_opcode_list ();
extern bool_t xdr_lwfs_opcode_array ();
extern bool_t xdr_lwfs_opcode_list_ptr ();
extern bool_t xdr_lwfs_cid ();
extern bool_t xdr_lwfs_stat_data ();
extern bool_t xdr_lwfs_oid ();
extern bool_t xdr_lwfs_vid ();
extern bool_t xdr_lwfs_nid ();
extern bool_t xdr_lwfs_pid ();
extern bool_t xdr_lwfs_remote_pid ();
extern bool_t xdr_lwfs_lock_id ();
extern bool_t xdr_lwfs_lock_type ();
extern bool_t xdr_lwfs_match_bits ();
extern bool_t xdr_lwfs_buffer_id ();
extern bool_t xdr_lwfs_rma ();
extern bool_t xdr_lwfs_rpc_transport ();
extern bool_t xdr_lwfs_rpc_encode ();
extern bool_t xdr_lwfs_service ();
extern bool_t xdr_lwfs_obj ();
extern bool_t xdr_lwfs_txn ();
extern bool_t xdr_lwfs_distributed_obj ();
extern bool_t xdr_lwfs_ns_entry ();
extern bool_t xdr_lwfs_ns_entry_array ();
extern bool_t xdr_lwfs_namespace ();
extern bool_t xdr_lwfs_namespace_array ();
extern bool_t xdr_lwfs_entry_type ();
extern bool_t xdr_lwfs_pt_indices ();
extern bool_t xdr_lwfs_request_header ();
extern bool_t xdr_lwfs_result_header ();
extern bool_t xdr_lwfs_key ();
extern bool_t xdr_lwfs_mac ();
extern bool_t xdr_lwfs_cred_data ();
extern bool_t xdr_lwfs_cred ();
extern bool_t xdr_lwfs_cap_data ();
extern bool_t xdr_lwfs_cap ();
extern bool_t xdr_lwfs_cap_array ();
extern bool_t xdr_lwfs_cap_list ();
extern bool_t xdr_lwfs_cap_list_ptr ();
extern bool_t xdr_lwfs_attr_data ();
extern bool_t xdr_lwfs_attr ();
extern bool_t xdr_lwfs_attr_array ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_XDR_TYPES_H_RPCGEN */
