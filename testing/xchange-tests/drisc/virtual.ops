#!perl
sub upperc {
    local($_) = pop(@_);
    tr/[a-z]/[A-Z]/;
    return $_;
}

&output_header;

%c_operations = ('add', '+', 'sub', '-', 'mul', '*', 'div', '/', 'mod', '%', 'and', '&', 'or', '|', 'xor', '^', 'lsh', '<<', 'rsh', '>>', 'com', '~', 'not', '!', 'neg', '-', 'eq', '==', 'ge', '>=', 'gt', '>', 'le', '<=', 'lt', '<', 'ne', '!=');

&arith_insn("add sub", "i u ul l p", "drisc_varith3");
&arith_insn("mul div mod and or xor lsh rsh", "u ul i l", "drisc_varith3");
&arith_insn("add sub mul div", "f d", "drisc_varith3");

&arith2_insn("com not", "i u ul l", "drisc_varith2");
&arith2_insn("neg", "i u ul l f d", "drisc_varith2");

&arithi_insn("add sub", "i u ul l p", "drisc_varith3i");
&arithi_insn("mul div mod", "u ul i l", "drisc_varith3i");

&arithi_insn("and or xor lsh rsh", "i u ul l", "drisc_varith3i", "0x1", "2");

&branch_insn( "eq ge gt le lt ne", "i u ul l p d f", "virtual_branch");
&branchi_insn( "eq ge gt le lt ne", "i u ul l p", "virtual_branchi");

&convert( "c d f i l s u ul us uc", "i u ul l");
&convert( "d f i l u ul", "f d");
&convert( "i l u ul", "c s");
&convert( "p ul", "ul p");
&load_store("c d f i l s u ul us uc");

print VMOUT "void emulate_arith3(int code, struct reg_type *dest, struct reg_type *src1, struct reg_type *src2)\n";
print VMOUT "{\n    switch(code) {\n$vm_a3_code    }\n}\n";
print VMOUT "void emulate_arith3i(int code, struct reg_type *dest, struct reg_type *src1, long imm)\n";
print VMOUT "{\n    switch(code) {\n$vm_a3i_code    }\n}\n";
print VMOUT "void emulate_arith2(int code, struct reg_type *dest, struct reg_type *src)\n";
print VMOUT "{\n    switch(code) {\n$vm_a2_code    }\n}\n";
print VMOUT "int emulate_branch(int code, struct reg_type *src1, struct reg_type *src2)\n";
print VMOUT "{\n    switch(code) {\n$vm_br_code    }return 0;\n}\n";
print VMOUT "int emulate_branchi(int code, struct reg_type *src1, long imm)\n";
print VMOUT "{\n    switch(code) {\n$vm_bri_code    }return 0;\n}\n";

print VMOUT "#define CONV(x,y) ((x<<4)+y)\n";
print VMOUT "void emulate_convert(int code, struct reg_type *dest, struct reg_type *src)\n";
print VMOUT "{\n    switch(code) {\n$vm_cvt_code        default: printf(\"convert missed case %lx \\n\", code); break;}\n}\n";
print VMOUT "int emulate_loadi(int code, struct reg_type *dest, struct reg_type *src, long imm)\n";
print VMOUT "{\n    switch(code) {\n$vm_loadi_code    }return 0;\n}\n";

print VMOUT "int emulate_storei(int code, struct reg_type *dest, struct reg_type *src, long imm)\n";
print VMOUT "{\n    switch(code) {\n$vm_storei_code    }return 0;\n}\n";

print COUT "jmp_table ${mach}_jump_table;\n";
print COUT "extern void dr_virtual_init(drisc_ctx c)\n{\n";
print COUT "\tif(virtual_jump_table == 0) {\n";
print COUT "\t  virtual_jump_table = alloc_drisc_jump_table();\n";
print COUT $jmp_a3_assigns;
print COUT $jmp_a3i_assigns;
print COUT $jmp_a2_assigns;
print COUT $jmp_b_assigns;
print COUT "\t  ${mach}_jump_table->proc_start = (drisc_mach_proc_start) virtual_proc_start;\n";
print COUT "\t  ${mach}_jump_table->end = (drisc_mach_end)virtual_end;\n";
print COUT "\t  ${mach}_jump_table->type_align = c->p->native.mach_jump->type_align;\n";
print COUT "\t  ${mach}_jump_table->type_size = c->p->native.mach_jump->type_size;\n";
print COUT "\t  ${mach}_jump_table->ret = virtual_ret;\n";
print COUT "\t  ${mach}_jump_table->reti = virtual_reti;\n";
print COUT "\t  ${mach}_jump_table->retf = (ret_opf)virtual_reti;\n";
print COUT "\t  ${mach}_jump_table->load = virtual_load;\n";
#  print COUT "\t  ${mach}_jump_table->bsload = sparc_pbsload;\n";
print COUT "\t  ${mach}_jump_table->loadi = virtual_loadi;\n";
#  print COUT "\t  ${mach}_jump_table->bsloadi = sparc_pbsloadi;\n";
print COUT "\t  ${mach}_jump_table->store = virtual_store;\n";
print COUT "\t  ${mach}_jump_table->storei = virtual_storei;\n";
print COUT "\t  ${mach}_jump_table->convert = virtual_convert;\n";
print COUT "\t  ${mach}_jump_table->mov = virtual_mov;\n";
print COUT "\t  ${mach}_jump_table->set = virtual_pset;\n";
print COUT "\t  ${mach}_jump_table->setf = virtual_setf;\n";
print COUT "\t  ${mach}_jump_table->jv = virtual_jump_to_label;\n";
print COUT "\t  ${mach}_jump_table->jp = virtual_jump_to_reg;\n";
print COUT "\t  ${mach}_jump_table->jpi = virtual_jump_to_imm;\n";
print COUT "\t  ${mach}_jump_table->special = virtual_special;\n";
print COUT "\t  ${mach}_jump_table->push = virtual_push;\n";
print COUT "\t  ${mach}_jump_table->pushi = virtual_pushi;\n";
print COUT "\t  ${mach}_jump_table->pushfi = virtual_pushfi;\n";
print COUT "\t  ${mach}_jump_table->calli = virtual_calli;\n";
print COUT "\t  ${mach}_jump_table->callr = virtual_callr;\n";
print COUT "	${mach}_jump_table->lea = virtual_lea;\n";
#  print COUT "\t  ${mach}_jump_table->local = sparc_local_op;\n";
#  print COUT "\t  ${mach}_jump_table->save_restore = sparc_save_restore_op;\n";
print COUT "\t  ${mach}_jump_table->init_disassembly = virtual_init_disassembly_info;\n";
print COUT "\t  ${mach}_jump_table->print_insn = virtual_print_insn;\n";
print COUT "\t  ${mach}_jump_table->print_reg = NULL;\n";
print COUT "\t  ${mach}_jump_table->count_insn = NULL;\n";
print COUT "\t  ${mach}_jump_table->do_reverse_push = c->p->native.mach_jump->do_reverse_push;\n";

print COUT "\t}\n";
print COUT "# line ". (__LINE__ + 2) . " \"virtual.ops\"\n";
print COUT<<EOF;
	if (c->p->virtual.mach_info == NULL) {
	    c->p->virtual.mach_info = malloc(sizeof(struct mach_info));
	}
	c->p->mach_info = c->p->virtual.mach_info;
	c->p->mach_reset = c->p->virtual.mach_reset;
	c->p->code_base = c->p->virtual.code_base;
	c->p->cur_ip = c->p->code_base;
	c->p->code_limit = c->p->virtual.code_limit;
	c->p->vreg_count = 0;
	c->dr_local_pointer = dr_getvreg(c, DR_P);
	c->dr_param_pointer = c->dr_local_pointer;
	c->j = virtual_jump_table;
	return;
}
EOF

sub arith_insn {
%src1_cast = ('p', '(char*)');
%src2_cast = ('p', '(long)');
    local ($ops, $type_list, $subr) = @_;
    foreach(split(' ', $ops)) {
	$op = $_;
	$c_op = $c_operations{$op};
	foreach(split(' ', $type_list)) {
	    $jmp_a3_assigns = $jmp_a3_assigns . "# line ".__LINE__." \"virtual.ops\"\n";
	    $jmp_a3_assigns = $jmp_a3_assigns . "\t  ${mach}_jump_table->jmp_a3[dr_jmp_${op}${_}] = $subr;\n";
	    $jmp_a3_assigns = $jmp_a3_assigns . "\t  ${mach}_jump_table->a3_data[dr_jmp_${op}${_}].data1 = dr_jmp_${op}${_};\n";
	    $jmp_a3_assigns = $jmp_a3_assigns . "\t  ${mach}_jump_table->a3_data[dr_jmp_${op}${_}].data2 = 0;\n";
	    $vm_a3_code .= "\t  case dr_jmp_${op}${_}:  dest->u.${_}.${_} = $src1_cast{$_} src1->u.${_}.${_} $c_op $src2_cast{$_} src2->u.${_}.${_}; break;\n";
	}
    }
}

sub arith2_insn {
    local ($ops, $type_list, $subr) = @_;
    foreach(split(' ', $ops)) {
	$op = $_;
	$c_op = $c_operations{$op};
	foreach(split(' ', $type_list)) {
	    $jmp_a2_assigns = $jmp_a2_assigns . "\t  ${mach}_jump_table->jmp_a2[dr_jmp_${op}${_}] = $subr;\n";
	    $jmp_a2_assigns = $jmp_a2_assigns . "\t  ${mach}_jump_table->a2_data[dr_jmp_${op}${_}].data1 = dr_jmp_${op}${_};\n";
	    $jmp_a2_assigns = $jmp_a2_assigns . "\t  ${mach}_jump_table->a2_data[dr_jmp_${op}${_}].data2 = 0;\n";
	    $vm_a2_code .= "\t  case dr_jmp_${op}${_}:  dest->u.${_}.${_} = $c_op $src_cast{$_} src->u.${_}.${_}; break;\n";
	}
    }
}

sub arithi_insn {
    local ($ops, $type_list, $subr, $code1, $code2) = @_;
    %src1_cast = ('p', '(char*)');
    foreach(split(' ', $ops)) {
	$op = $_;
	$c_op = $c_operations{$op};
	foreach(split(' ', $type_list)) {
	    $jmp_a3i_assigns = $jmp_a3i_assigns . "\t  ${mach}_jump_table->jmp_a3i[dr_jmp_${op}${_}] = $subr;\n";
	    $jmp_a3i_assigns = $jmp_a3i_assigns . "\t  ${mach}_jump_table->a3i_data[dr_jmp_${op}${_}].data1 = dr_jmp_${op}${_};\n";
	    $jmp_a3i_assigns = $jmp_a3i_assigns . "\t  ${mach}_jump_table->a3i_data[dr_jmp_${op}${_}].data2 = 0;\n";
	    $vm_a3i_code .= "\t  case dr_jmp_${op}${_}:  dest->u.${_}.${_} = $src1_cast{$_} src1->u.${_}.${_} $c_op $src2_cast{$_} imm; break;\n";
	}
    }
}

sub branch_insn {
    local($ops, $types, $subr) = @_;
    foreach (split(' ', $ops)) {
	$op = $_;
	$c_op = $c_operations{$op};
	foreach (split(' ', $types)) {
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->jmp_b[dr_jmp_b${op}${_}] = $subr;\n";
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->b_data[dr_jmp_b${op}${_}].data1 = dr_jmp_b${op}${_};\n";
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->b_data[dr_jmp_b${op}${_}].data2 = DR_". &upperc(${_}). ";\n";
	    $vm_br_code .=  "\t  case dr_jmp_b${op}${_}:  return ($src1_cast{$_} src1->u.${_}.${_}) $c_op ($src2_cast{$_} src2->u.${_}.${_});\n";
	}
    }
}

sub branchi_insn {
    local($ops, $types, $subr) = @_;
    foreach (split(' ', $ops)) {
	$op = $_;
	$c_op = $c_operations{$op};
	foreach (split(' ', $types)) {
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->jmp_bi[dr_jmp_b${op}${_}] = $subr;\n";
	    $vm_bri_code .=  "\t  case dr_jmp_b${op}${_}:  return ($src1_cast{$_} src1->u.${_}.${_}) $c_op $src1_cast{$_} imm; break;\n";
	}
    }
}

sub branch_insn {
    local($ops, $types, $subr) = @_;
    foreach (split(' ', $ops)) {
	$op = $_;
	$c_op = $c_operations{$op};
	foreach (split(' ', $types)) {
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->jmp_b[dr_jmp_b${op}${_}] = $subr;\n";
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->b_data[dr_jmp_b${op}${_}].data1 = dr_jmp_b${op}${_};\n";
	    $jmp_b_assigns = $jmp_b_assigns . "\t  ${mach}_jump_table->b_data[dr_jmp_b${op}${_}].data2 = DR_". &upperc(${_}). ";\n";
	    $vm_br_code .=  "\t  case dr_jmp_b${op}${_}:  return ($src2_cast{$_} src1->u.${_}.${_}) $c_op ($src2_cast{$_} src2->u.${_}.${_});\n";
	}
    }
}


sub convert {
    local($from_types, $to_types) = @_;
    %src_cast = ('pul', '(long)', 'ulp', '(void*)');
    %convert_right = ('c', '((char)(0xff & src->u.l.l))', 's', '((short)(0xffff & src->u.l.l))', 'i', '((int)(0xffffffff & src->u.l.l))', 'uc', '((unsigned char)(0xff & src->u.l.l))', 'us', '((unsigned short)(0xffff & src->u.l.l))', 'u', '((unsigned int)(0xffffffff & src->u.l.l))', 'l', 'src->u.l.l', 'ul', '(long)src->u.ul.ul', 'd', 'src->u.d.d', 'f', 'src->u.f.f', 'p', 'src->u.l.l');
    foreach (split(' ', $from_types)) {
	$from = $_;
	foreach (split(' ', $to_types)) {
	    if (${from} eq ${_}) { 
		next;
	    }
	    $vm_cvt_code .= "\tcase CONV(DR_" . &upperc(${from}) . ", DR_" . &upperc($_) . "): dest->u.${_}.${_} = $convert_right{$from}; break;\n";
	}
    }
}

sub load_store {
    local($types) = @_;
    %load_store = ('c', '*((char*)(src->u.l.l + imm))', 's', '*((short*)(src->u.l.l + imm))', 'i', '*((int*)(src->u.l.l + imm))', 'uc', '*((unsigned char*)(src->u.l.l + imm))', 'us', '*((unsigned short *)(src->u.l.l + imm))', 'u', '*((unsigned int *)(src->u.l.l + imm))', 'l', '*((long*)(src->u.l.l + imm))', 'ul', '*((unsigned long *)(src->u.l.l + imm))', 'd', '*((double*)(src->u.l.l + imm))', 'f', '*((float*)(src->u.l.l + imm))', 'p', '*((void**)(src->u.l.l + imm))');
    foreach (split(' ', $types)) {
	if (($_ eq 'f') || ($_ eq 'd')) {
	    $vm_loadi_code .= "\tcase DR_" . &upperc(${_}). ": dest->u.${_}.${_} = $load_store{$_}; break;\n";
	} else {
	    $vm_loadi_code .= "\tcase DR_" . &upperc(${_}). ": dest->u.l.l = (long) $load_store{$_}; break;\n";
	}
	$vm_storei_code .= "\tcase DR_" . &upperc(${_}). ": $load_store{$_} = dest->u.${_}.${_}; break;\n";
    }
}

sub output_header {
    $mach = virtual;
    open(COUT, ">drisc_${mach}.c") || die "Can't open header output";
    open(VMOUT, ">vm_include.c") || die "Can't open vm_include output";
print VMOUT<<EOF;
/* This file is generated from virtual.ops.  Do not edit directly. */

EOF
print COUT "# line ". (__LINE__ + 2) . " \"virtual.ops\"\n";
print COUT<<EOF;
/* This file is generated from virtual.ops.  Do not edit directly. */

#include "config.h"
#include "drisc.h"
#include "drisc_internal.h"
#include "virtual.h"
#ifndef LINUX_KERNEL_MODULE
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif
#include <assert.h>
#else
#ifdef LINUX_KERNEL_MODULE
#ifndef __KERNEL__
#define __KERNEL__
#endif
#endif
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/string.h>
#include "kdrisc.h"
#include "library.h"

#define printf	printk
#define fprintf(file, args...)	printk (args)
#define malloc (void *)DAllocMM
#define realloc(a,b) (void *)DReallocMM((addrs_t)a, b)
#define free(a) DFreeMM((addrs_t) a)
#define qsort _quicksort
#endif

static void 
drisc_varith3(drisc_ctx c, int op3, int op, int dest, int src1, int src2)
{
    virtual_insn i;
    i.class_code = iclass_arith3;
    i.insn_code = op3;
    i.opnds.a3.dest = dest;
    i.opnds.a3.src1 = src1;
    i.opnds.a3.src2 = src2;
    INSN_OUT(c, i);
}

static void 
drisc_varith3i(drisc_ctx c, int op3, int op, int dest, int src1, long imm)
{
    virtual_insn i;
    i.class_code = iclass_arith3i;
    i.insn_code = op3;
    i.opnds.a3i.dest = dest;
    i.opnds.a3i.src = src1;
    i.opnds.a3i.imm = imm;
    INSN_OUT(c, i);
}

static void drisc_varith2(drisc_ctx c, int op3, int op, int dest, int src)
{
    virtual_insn i;
    i.class_code = iclass_arith2;
    i.insn_code = op3;
    i.opnds.a2.dest = dest;
    i.opnds.a2.src = src;
    INSN_OUT(c, i);
}

extern void virtual_ret(drisc_ctx c, int data1, int data2, int src)
{
    virtual_insn i;
    i.class_code = iclass_ret;
    i.insn_code = data1;
    i.opnds.a1.src = src;
    INSN_OUT(c, i);
}


extern void
virtual_convert(drisc_ctx c, int from_type, int to_type, 
	      int dest, int src)
{
    virtual_insn i;
    i.class_code = iclass_convert;
    i.insn_code = (unsigned)((from_type<<4) + to_type);
    i.opnds.a2.dest = dest;
    i.opnds.a2.src = src;
    INSN_OUT(c, i);
}

extern void
virtual_load(drisc_ctx c, int type, int junk, int dest, int src1, int src2)
{
    virtual_insn i;
    i.class_code = iclass_loadstore;
    i.insn_code = type;
    i.opnds.a3.dest = dest;
    i.opnds.a3.src1 = src1;
    i.opnds.a3.src2 = src2;
    INSN_OUT(c, i);
}

extern void
virtual_loadi(drisc_ctx c, int type, int junk, int dest, int src1, long imm)
{
    virtual_insn i;
    i.class_code = iclass_loadstorei;
    i.insn_code = type;
    i.opnds.a3i.dest = dest;
    i.opnds.a3i.src = src1;
    i.opnds.a3i.imm = imm;
    INSN_OUT(c, i);
}

extern void
virtual_store(drisc_ctx c, int type, int junk, int dest, int src1, int src2)
{
    virtual_insn i;
    i.class_code = iclass_loadstore;
    i.insn_code = 0x10 | type;
    i.opnds.a3.dest = dest;
    i.opnds.a3.src1 = src1;
    i.opnds.a3.src2 = src2;
    INSN_OUT(c, i);
}

extern void
virtual_storei(drisc_ctx c, int type, int junk, int dest, int src1, long imm)
{
    virtual_insn i;
    i.class_code = iclass_loadstorei;
    i.insn_code = 0x10 | type;
    i.opnds.a3i.dest = dest;
    i.opnds.a3i.src = src1;
    i.opnds.a3i.imm = imm;
    INSN_OUT(c, i);
}

extern void
virtual_mov(drisc_ctx c, int type, int junk, int dest, int src)
{
    virtual_insn i;
    i.class_code = iclass_mov;
    i.insn_code = type;
    i.opnds.a2.dest = dest;
    i.opnds.a2.src = src;
    INSN_OUT(c, i);
}

extern void
virtual_pset(drisc_ctx c, int type, int junk, int dest, long imm)
{
    virtual_insn i;
    i.class_code = iclass_set;
    i.insn_code = type;
    i.opnds.a3i.dest = dest;
    i.opnds.a3i.imm = imm;
    INSN_OUT(c, i);
}

extern void
virtual_setf(drisc_ctx c, int type, int junk, int dest, double imm)
{
    virtual_insn i;
    i.class_code = iclass_setf;
    i.insn_code = type;
    i.opnds.sf.dest = dest;
    i.opnds.sf.imm = imm;
    INSN_OUT(c, i);
}

static void
virtual_reti(drisc_ctx c, int type, int junk, long imm)
{
    virtual_insn i;
    i.class_code = iclass_reti;
    i.insn_code = type;
    i.opnds.a3i.imm = imm;
    INSN_OUT(c, i);
}

static void
virtual_branch(drisc_ctx c, int op, int type, int src1, int src2, int label)
{
    virtual_insn i;
    i.class_code = iclass_branch;
    i.insn_code = op;
    i.opnds.br.src1 = src1;
    i.opnds.br.src2 = src2;
    i.opnds.br.label = label;
    INSN_OUT(c, i);
}

static void
virtual_branchi(drisc_ctx c, int op, int type, int src, long imm, int label)
{
    virtual_insn i;
    i.class_code = iclass_branchi;
    i.insn_code = op;
    i.opnds.bri.src = src;
    i.opnds.bri.imm = imm;
    i.opnds.bri.label = label;
    INSN_OUT(c, i);
}

static void
virtual_jump_to_label(drisc_ctx c, unsigned long label)
{
    virtual_insn i;
    i.class_code = iclass_jump_to_label;
    i.insn_code = 0;
    i.opnds.br.label = (unsigned short) label;
    INSN_OUT(c, i);
}

extern void virtual_jump_to_reg(drisc_ctx c, unsigned long reg)
{
    virtual_insn i;
    i.class_code = iclass_jump_to_reg;
    i.insn_code = 0;
    i.opnds.br.src1 = (unsigned short) reg;
    INSN_OUT(c, i);
}

extern void virtual_jump_to_imm(drisc_ctx c, unsigned long imm)
{
    virtual_insn i;
    i.class_code = iclass_jump_to_imm;
    i.insn_code = 0;
    i.opnds.bri.imm = imm;
    INSN_OUT(c, i);
}

extern int virtual_calli(drisc_ctx c, int type, void *xfer_address)
{
    virtual_insn i;
    i.class_code = iclass_call;
    i.insn_code = type;
    i.opnds.bri.src = -1;
    if (type != DR_V) i.opnds.bri.src = dr_getvreg(c, type);
    i.opnds.bri.imm = (long)xfer_address;
    INSN_OUT(c, i);
    return i.opnds.bri.src;
}

extern int virtual_callr(drisc_ctx c, int type, int src)
{
    virtual_insn i;
    i.class_code = iclass_call;
    i.insn_code = 0x10 | type;
    i.opnds.bri.src = -1;
    if (type != DR_V) i.opnds.bri.src = dr_getvreg(c, type);
    i.opnds.bri.imm = src;
    INSN_OUT(c, i);
    return i.opnds.bri.src;
}

extern void virtual_push(drisc_ctx c, int type, int reg)
{
    virtual_insn i;
    i.class_code = iclass_push;
    i.insn_code = type;
    i.opnds.a1.src = reg;
    INSN_OUT(c, i);
}

extern void virtual_pushi(drisc_ctx c, int type, long value)
{
    virtual_insn i;
    i.class_code = iclass_pushi;
    i.insn_code = type;
    i.opnds.a3i.imm = value;
    INSN_OUT(c, i);
}

extern void virtual_pushfi(drisc_ctx c, int type, double value)
{
    virtual_insn i;
    i.class_code = iclass_pushf;
    i.insn_code = type;
    i.opnds.sf.imm = value;
    INSN_OUT(c, i);
}

extern void virtual_lea(drisc_ctx c, int junk1, int junk2, int dest, int src,
			long imm)
{
    virtual_insn i;
    i.class_code = iclass_lea;
    i.insn_code = 0;
    i.opnds.a3i.dest = dest;
    i.opnds.a3i.src = src;
    i.opnds.a3i.imm = imm;
    INSN_OUT(c, i);
}

extern void virtual_special(drisc_ctx c, special_operations type, long param)
{
    virtual_insn i;
    i.class_code = iclass_special;
    i.insn_code = 0;
    i.opnds.spec.type = type;
    i.opnds.spec.param = param;
    INSN_OUT(c, i);
}

static int
virtual_init_disassembly_info(drisc_ctx c, void *ptr)
{
    return 1;
}

EOF
}
