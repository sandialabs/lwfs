/* cmdline.h */

/* File autogenerated by gengetopt version 2.17  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "lwfs-tests"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "0.1"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  int cid_arg;	/* The container ID to use (default='1').  */
  char * cid_orig;	/* The container ID to use original value given at command line.  */
  const char *cid_help; /* The container ID to use help description.  */
  int oid_arg;	/* The object ID to use (default='1').  */
  char * oid_orig;	/* The object ID to use original value given at command line.  */
  const char *oid_help; /* The object ID to use help description.  */
  int num_objs_arg;	/* The number of object to create/remove/... (default='1').  */
  char * num_objs_orig;	/* The number of object to create/remove/... original value given at command line.  */
  const char *num_objs_help; /* The number of object to create/remove/... help description.  */
  char * data_arg;	/* Character string stored in an object (default='hello world').  */
  char * data_orig;	/* Character string stored in an object original value given at command line.  */
  const char *data_help; /* Character string stored in an object help description.  */
  int trunc_size_arg;	/* Size (bytes) of a file after the trunc test (default='32').  */
  char * trunc_size_orig;	/* Size (bytes) of a file after the trunc test original value given at command line.  */
  const char *trunc_size_help; /* Size (bytes) of a file after the trunc test help description.  */
  char * attr_name_arg;	/* Name of an attribute (default='testattr').  */
  char * attr_name_orig;	/* Name of an attribute original value given at command line.  */
  const char *attr_name_help; /* Name of an attribute help description.  */
  char * attr_val_arg;	/* Value to store in an attribute (default='testvalue').  */
  char * attr_val_orig;	/* Value to store in an attribute original value given at command line.  */
  const char *attr_val_help; /* Value to store in an attribute help description.  */
  char * test_arg;	/* Name of the test (default='exists').  */
  char * test_orig;	/* Name of the test original value given at command line.  */
  const char *test_help; /* Name of the test help description.  */
  int verbose_arg;	/* Debug level of logger [0-5] (default='5').  */
  char * verbose_orig;	/* Debug level of logger [0-5] original value given at command line.  */
  const char *verbose_help; /* Debug level of logger [0-5] help description.  */
  char * logfile_arg;	/* Path to logfile.  */
  char * logfile_orig;	/* Path to logfile original value given at command line.  */
  const char *logfile_help; /* Path to logfile help description.  */
  long authr_pid_arg;	/* PID of the authr server (default='124').  */
  char * authr_pid_orig;	/* PID of the authr server original value given at command line.  */
  const char *authr_pid_help; /* PID of the authr server help description.  */
  long authr_nid_arg;	/* NID of the authr server (default='0').  */
  char * authr_nid_orig;	/* NID of the authr server original value given at command line.  */
  const char *authr_nid_help; /* NID of the authr server help description.  */
  int authr_cache_caps_flag;	/* Cache caps on the client (default=off).  */
  const char *authr_cache_caps_help; /* Cache caps on the client help description.  */
  char * ss_server_file_arg;	/* Path to a file with a list of storage servers.  */
  char * ss_server_file_orig;	/* Path to a file with a list of storage servers original value given at command line.  */
  const char *ss_server_file_help; /* Path to a file with a list of storage servers help description.  */
  int ss_num_servers_arg;	/* Number of servers to use from the server file (default='1').  */
  char * ss_num_servers_orig;	/* Number of servers to use from the server file original value given at command line.  */
  const char *ss_num_servers_help; /* Number of servers to use from the server file help description.  */
  int ss_pid_arg;	/* The PID of a single remote storage storage server (ignored if using --ss=server-file) (default='122').  */
  char * ss_pid_orig;	/* The PID of a single remote storage storage server (ignored if using --ss=server-file) original value given at command line.  */
  const char *ss_pid_help; /* The PID of a single remote storage storage server (ignored if using --ss=server-file) help description.  */
  long ss_nid_arg;	/* The NID of a single remote storage server (ignored if using --ss-server-file) (default='0').  */
  char * ss_nid_orig;	/* The NID of a single remote storage server (ignored if using --ss-server-file) original value given at command line.  */
  const char *ss_nid_help; /* The NID of a single remote storage server (ignored if using --ss-server-file) help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int cid_given ;	/* Whether cid was given.  */
  int oid_given ;	/* Whether oid was given.  */
  int num_objs_given ;	/* Whether num-objs was given.  */
  int data_given ;	/* Whether data was given.  */
  int trunc_size_given ;	/* Whether trunc-size was given.  */
  int attr_name_given ;	/* Whether attr-name was given.  */
  int attr_val_given ;	/* Whether attr-val was given.  */
  int test_given ;	/* Whether test was given.  */
  int verbose_given ;	/* Whether verbose was given.  */
  int logfile_given ;	/* Whether logfile was given.  */
  int authr_pid_given ;	/* Whether authr-pid was given.  */
  int authr_nid_given ;	/* Whether authr-nid was given.  */
  int authr_cache_caps_given ;	/* Whether authr-cache-caps was given.  */
  int ss_server_file_given ;	/* Whether ss-server-file was given.  */
  int ss_num_servers_given ;	/* Whether ss-num-servers was given.  */
  int ss_pid_given ;	/* Whether ss-pid was given.  */
  int ss_nid_given ;	/* Whether ss-nid was given.  */

} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_string (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name);
int cmdline_parser_string2 (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern char *cmdline_parser_test_values[] ;	/* Possible values for test.  */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
