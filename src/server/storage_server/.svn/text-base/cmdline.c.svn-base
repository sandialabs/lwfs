/*
  File autogenerated by gengetopt version 2.17
  generated with the following command:
  /home/raoldfi/software/i386/bin/gengetopt -S --set-package=authr-server --set-version=0.1 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getopt.h"

#include "cmdline.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: authr-server [OPTIONS]...";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "  -V, --version                 Print version and exit",
  "      --num-reqs=INT            Number of requests before exit  (default=`-1')",
  "      --use-threads             Flag to use threads for the server  \n                                  (default=off)",
  "      --daemon                  Flag to run server as a daemon  (default=off)",
  "      --ss-pid=INT              The process ID to use for the server  \n                                  (default=`122')",
  "      --ss-numbufs=INT          The number of I/O buffers to use on the server  \n                                  (default=`10')",
  "      --ss-bufsize=LONG         The size (in bytes) of an I/O buffer  \n                                  (default=`1048576')",
  "      --ss-root=STRING          Path to root  (default=`ss-root')",
  "      --ss-iolib=STRING         Which I/O library to use  (possible \n                                  values=\"sysio\", \"aio\", \"sim\", \"ebofs\" \n                                  default=`sysio')",
  "      --ss-xfer-only            A flag to only transfer data (no disk I/O)  \n                                  (default=off)",
  "      --ss-db-path=STRING       Path to the object attribute database  \n                                  (default=`ss-attr.db')",
  "      --ss-db-clear             Clear the object attribute database before use  \n                                  (default=off)",
  "      --ss-db-recover           Recover the object attribute database after a \n                                  crash  (default=off)",
  "      --verbose=INT             Debug level of logger [0-5]  (default=`5')",
  "      --logfile=STRING          Path to logfile",
  "      --tp-init-thread-count=INT\n                                Initial number of thread in the pool  \n                                  (default=`1')",
  "      --tp-min-thread-count=INT Minimum number of thread in the pool  \n                                  (default=`1')",
  "      --tp-max-thread-count=INT Maximum number of thread in the pool  \n                                  (default=`1')",
  "      --tp-low-watermark=INT    Request queue size at which threads are removed \n                                  from the pool  (default=`1')",
  "      --tp-high-watermark=INT   Request queue size at which threads are added \n                                  to the pool  (default=`1')",
  "      --authr-pid=LONG          PID of the authr server  (default=`124')",
  "      --authr-nid=LONG          NID of the authr server  (default=`0')",
  "      --authr-cache-caps        Cache caps on the client  (default=off)",
    0
};

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error);

struct line_list
{
  char * string_arg;
  struct line_list * next;
};

static struct line_list *cmd_line_list = 0;
static struct line_list *cmd_line_list_tmp = 0;

static void
free_cmd_list(void)
{
  /* free the list of a previous call */
  if (cmd_line_list)
    {
      while (cmd_line_list) {
        cmd_line_list_tmp = cmd_line_list;
        cmd_line_list = cmd_line_list->next;
        free (cmd_line_list_tmp->string_arg);
        free (cmd_line_list_tmp);
      }
    }
}


char *cmdline_parser_ss_iolib_values[] = {"sysio", "aio", "sim", "ebofs", 0} ;	/* Possible values for ss-iolib.  */

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->num_reqs_given = 0 ;
  args_info->use_threads_given = 0 ;
  args_info->daemon_given = 0 ;
  args_info->ss_pid_given = 0 ;
  args_info->ss_numbufs_given = 0 ;
  args_info->ss_bufsize_given = 0 ;
  args_info->ss_root_given = 0 ;
  args_info->ss_iolib_given = 0 ;
  args_info->ss_xfer_only_given = 0 ;
  args_info->ss_db_path_given = 0 ;
  args_info->ss_db_clear_given = 0 ;
  args_info->ss_db_recover_given = 0 ;
  args_info->verbose_given = 0 ;
  args_info->logfile_given = 0 ;
  args_info->tp_init_thread_count_given = 0 ;
  args_info->tp_min_thread_count_given = 0 ;
  args_info->tp_max_thread_count_given = 0 ;
  args_info->tp_low_watermark_given = 0 ;
  args_info->tp_high_watermark_given = 0 ;
  args_info->authr_pid_given = 0 ;
  args_info->authr_nid_given = 0 ;
  args_info->authr_cache_caps_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  args_info->num_reqs_arg = -1;
  args_info->num_reqs_orig = NULL;
  args_info->use_threads_flag = 0;
  args_info->daemon_flag = 0;
  args_info->ss_pid_arg = 122;
  args_info->ss_pid_orig = NULL;
  args_info->ss_numbufs_arg = 10;
  args_info->ss_numbufs_orig = NULL;
  args_info->ss_bufsize_arg = 1048576;
  args_info->ss_bufsize_orig = NULL;
  args_info->ss_root_arg = gengetopt_strdup ("ss-root");
  args_info->ss_root_orig = NULL;
  args_info->ss_iolib_arg = gengetopt_strdup ("sysio");
  args_info->ss_iolib_orig = NULL;
  args_info->ss_xfer_only_flag = 0;
  args_info->ss_db_path_arg = gengetopt_strdup ("ss-attr.db");
  args_info->ss_db_path_orig = NULL;
  args_info->ss_db_clear_flag = 0;
  args_info->ss_db_recover_flag = 0;
  args_info->verbose_arg = 5;
  args_info->verbose_orig = NULL;
  args_info->logfile_arg = NULL;
  args_info->logfile_orig = NULL;
  args_info->tp_init_thread_count_arg = 1;
  args_info->tp_init_thread_count_orig = NULL;
  args_info->tp_min_thread_count_arg = 1;
  args_info->tp_min_thread_count_orig = NULL;
  args_info->tp_max_thread_count_arg = 1;
  args_info->tp_max_thread_count_orig = NULL;
  args_info->tp_low_watermark_arg = 1;
  args_info->tp_low_watermark_orig = NULL;
  args_info->tp_high_watermark_arg = 1;
  args_info->tp_high_watermark_orig = NULL;
  args_info->authr_pid_arg = 124;
  args_info->authr_pid_orig = NULL;
  args_info->authr_nid_arg = 0;
  args_info->authr_nid_orig = NULL;
  args_info->authr_cache_caps_flag = 0;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{
  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->num_reqs_help = gengetopt_args_info_help[2] ;
  args_info->use_threads_help = gengetopt_args_info_help[3] ;
  args_info->daemon_help = gengetopt_args_info_help[4] ;
  args_info->ss_pid_help = gengetopt_args_info_help[5] ;
  args_info->ss_numbufs_help = gengetopt_args_info_help[6] ;
  args_info->ss_bufsize_help = gengetopt_args_info_help[7] ;
  args_info->ss_root_help = gengetopt_args_info_help[8] ;
  args_info->ss_iolib_help = gengetopt_args_info_help[9] ;
  args_info->ss_xfer_only_help = gengetopt_args_info_help[10] ;
  args_info->ss_db_path_help = gengetopt_args_info_help[11] ;
  args_info->ss_db_clear_help = gengetopt_args_info_help[12] ;
  args_info->ss_db_recover_help = gengetopt_args_info_help[13] ;
  args_info->verbose_help = gengetopt_args_info_help[14] ;
  args_info->logfile_help = gengetopt_args_info_help[15] ;
  args_info->tp_init_thread_count_help = gengetopt_args_info_help[16] ;
  args_info->tp_min_thread_count_help = gengetopt_args_info_help[17] ;
  args_info->tp_max_thread_count_help = gengetopt_args_info_help[18] ;
  args_info->tp_low_watermark_help = gengetopt_args_info_help[19] ;
  args_info->tp_high_watermark_help = gengetopt_args_info_help[20] ;
  args_info->authr_pid_help = gengetopt_args_info_help[21] ;
  args_info->authr_nid_help = gengetopt_args_info_help[22] ;
  args_info->authr_cache_caps_help = gengetopt_args_info_help[23] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n", CMDLINE_PARSER_PACKAGE, CMDLINE_PARSER_VERSION);
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  cmdline_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  printf("\n%s\n\n", gengetopt_args_info_usage);
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);
}

static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{
  
  if (args_info->num_reqs_orig)
    {
      free (args_info->num_reqs_orig); /* free previous argument */
      args_info->num_reqs_orig = 0;
    }
  if (args_info->ss_pid_orig)
    {
      free (args_info->ss_pid_orig); /* free previous argument */
      args_info->ss_pid_orig = 0;
    }
  if (args_info->ss_numbufs_orig)
    {
      free (args_info->ss_numbufs_orig); /* free previous argument */
      args_info->ss_numbufs_orig = 0;
    }
  if (args_info->ss_bufsize_orig)
    {
      free (args_info->ss_bufsize_orig); /* free previous argument */
      args_info->ss_bufsize_orig = 0;
    }
  if (args_info->ss_root_arg)
    {
      free (args_info->ss_root_arg); /* free previous argument */
      args_info->ss_root_arg = 0;
    }
  if (args_info->ss_root_orig)
    {
      free (args_info->ss_root_orig); /* free previous argument */
      args_info->ss_root_orig = 0;
    }
  if (args_info->ss_iolib_arg)
    {
      free (args_info->ss_iolib_arg); /* free previous argument */
      args_info->ss_iolib_arg = 0;
    }
  if (args_info->ss_iolib_orig)
    {
      free (args_info->ss_iolib_orig); /* free previous argument */
      args_info->ss_iolib_orig = 0;
    }
  if (args_info->ss_db_path_arg)
    {
      free (args_info->ss_db_path_arg); /* free previous argument */
      args_info->ss_db_path_arg = 0;
    }
  if (args_info->ss_db_path_orig)
    {
      free (args_info->ss_db_path_orig); /* free previous argument */
      args_info->ss_db_path_orig = 0;
    }
  if (args_info->verbose_orig)
    {
      free (args_info->verbose_orig); /* free previous argument */
      args_info->verbose_orig = 0;
    }
  if (args_info->logfile_arg)
    {
      free (args_info->logfile_arg); /* free previous argument */
      args_info->logfile_arg = 0;
    }
  if (args_info->logfile_orig)
    {
      free (args_info->logfile_orig); /* free previous argument */
      args_info->logfile_orig = 0;
    }
  if (args_info->tp_init_thread_count_orig)
    {
      free (args_info->tp_init_thread_count_orig); /* free previous argument */
      args_info->tp_init_thread_count_orig = 0;
    }
  if (args_info->tp_min_thread_count_orig)
    {
      free (args_info->tp_min_thread_count_orig); /* free previous argument */
      args_info->tp_min_thread_count_orig = 0;
    }
  if (args_info->tp_max_thread_count_orig)
    {
      free (args_info->tp_max_thread_count_orig); /* free previous argument */
      args_info->tp_max_thread_count_orig = 0;
    }
  if (args_info->tp_low_watermark_orig)
    {
      free (args_info->tp_low_watermark_orig); /* free previous argument */
      args_info->tp_low_watermark_orig = 0;
    }
  if (args_info->tp_high_watermark_orig)
    {
      free (args_info->tp_high_watermark_orig); /* free previous argument */
      args_info->tp_high_watermark_orig = 0;
    }
  if (args_info->authr_pid_orig)
    {
      free (args_info->authr_pid_orig); /* free previous argument */
      args_info->authr_pid_orig = 0;
    }
  if (args_info->authr_nid_orig)
    {
      free (args_info->authr_nid_orig); /* free previous argument */
      args_info->authr_nid_orig = 0;
    }
  
  clear_given (args_info);
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  if (args_info->help_given) {
    fprintf(outfile, "%s\n", "help");
  }
  if (args_info->version_given) {
    fprintf(outfile, "%s\n", "version");
  }
  if (args_info->num_reqs_given) {
    if (args_info->num_reqs_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "num-reqs", args_info->num_reqs_orig);
    } else {
      fprintf(outfile, "%s\n", "num-reqs");
    }
  }
  if (args_info->use_threads_given) {
    fprintf(outfile, "%s\n", "use-threads");
  }
  if (args_info->daemon_given) {
    fprintf(outfile, "%s\n", "daemon");
  }
  if (args_info->ss_pid_given) {
    if (args_info->ss_pid_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "ss-pid", args_info->ss_pid_orig);
    } else {
      fprintf(outfile, "%s\n", "ss-pid");
    }
  }
  if (args_info->ss_numbufs_given) {
    if (args_info->ss_numbufs_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "ss-numbufs", args_info->ss_numbufs_orig);
    } else {
      fprintf(outfile, "%s\n", "ss-numbufs");
    }
  }
  if (args_info->ss_bufsize_given) {
    if (args_info->ss_bufsize_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "ss-bufsize", args_info->ss_bufsize_orig);
    } else {
      fprintf(outfile, "%s\n", "ss-bufsize");
    }
  }
  if (args_info->ss_root_given) {
    if (args_info->ss_root_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "ss-root", args_info->ss_root_orig);
    } else {
      fprintf(outfile, "%s\n", "ss-root");
    }
  }
  if (args_info->ss_iolib_given) {
    if (args_info->ss_iolib_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "ss-iolib", args_info->ss_iolib_orig);
    } else {
      fprintf(outfile, "%s\n", "ss-iolib");
    }
  }
  if (args_info->ss_xfer_only_given) {
    fprintf(outfile, "%s\n", "ss-xfer-only");
  }
  if (args_info->ss_db_path_given) {
    if (args_info->ss_db_path_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "ss-db-path", args_info->ss_db_path_orig);
    } else {
      fprintf(outfile, "%s\n", "ss-db-path");
    }
  }
  if (args_info->ss_db_clear_given) {
    fprintf(outfile, "%s\n", "ss-db-clear");
  }
  if (args_info->ss_db_recover_given) {
    fprintf(outfile, "%s\n", "ss-db-recover");
  }
  if (args_info->verbose_given) {
    if (args_info->verbose_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "verbose", args_info->verbose_orig);
    } else {
      fprintf(outfile, "%s\n", "verbose");
    }
  }
  if (args_info->logfile_given) {
    if (args_info->logfile_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "logfile", args_info->logfile_orig);
    } else {
      fprintf(outfile, "%s\n", "logfile");
    }
  }
  if (args_info->tp_init_thread_count_given) {
    if (args_info->tp_init_thread_count_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "tp-init-thread-count", args_info->tp_init_thread_count_orig);
    } else {
      fprintf(outfile, "%s\n", "tp-init-thread-count");
    }
  }
  if (args_info->tp_min_thread_count_given) {
    if (args_info->tp_min_thread_count_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "tp-min-thread-count", args_info->tp_min_thread_count_orig);
    } else {
      fprintf(outfile, "%s\n", "tp-min-thread-count");
    }
  }
  if (args_info->tp_max_thread_count_given) {
    if (args_info->tp_max_thread_count_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "tp-max-thread-count", args_info->tp_max_thread_count_orig);
    } else {
      fprintf(outfile, "%s\n", "tp-max-thread-count");
    }
  }
  if (args_info->tp_low_watermark_given) {
    if (args_info->tp_low_watermark_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "tp-low-watermark", args_info->tp_low_watermark_orig);
    } else {
      fprintf(outfile, "%s\n", "tp-low-watermark");
    }
  }
  if (args_info->tp_high_watermark_given) {
    if (args_info->tp_high_watermark_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "tp-high-watermark", args_info->tp_high_watermark_orig);
    } else {
      fprintf(outfile, "%s\n", "tp-high-watermark");
    }
  }
  if (args_info->authr_pid_given) {
    if (args_info->authr_pid_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "authr-pid", args_info->authr_pid_orig);
    } else {
      fprintf(outfile, "%s\n", "authr-pid");
    }
  }
  if (args_info->authr_nid_given) {
    if (args_info->authr_nid_orig) {
      fprintf(outfile, "%s=\"%s\"\n", "authr-nid", args_info->authr_nid_orig);
    } else {
      fprintf(outfile, "%s\n", "authr-nid");
    }
  }
  if (args_info->authr_cache_caps_given) {
    fprintf(outfile, "%s\n", "authr-cache-caps");
  }
  
  fclose (outfile);

  i = EXIT_SUCCESS;
  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/*
 * Returns:
 * - the index of the matched value
 * - -1 if no argument has been specified
 * - -2 if more than one value has matched
 */
static int
check_possible_values(const char *val, char *values[])
{
  int i, found, last;
  size_t len;

  if (!val)   /* otherwise strlen() crashes below */
    return -1; /* -1 means no argument for the option */

  found = last = 0;

  for (i = 0, len = strlen(val); values[i]; ++i)
    {
      if (strncmp(val, values[i], len) == 0)
        {
          ++found;
          last = i;
          if (strlen(values[i]) == len)
            return i; /* exact macth no need to check more */
        }
    }

  if (found == 1) /* one match: OK */
    return last;

  return (found ? -2 : -1); /* return many values are matched */
}


/* gengetopt_strdup() */
/* strdup.c replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = NULL;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

int
cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;

  result = cmdline_parser_internal (argc, argv, args_info, override, initialize, check_required, NULL);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  return EXIT_SUCCESS;
}

int
cmdline_parser_internal (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  int error = 0;
  struct gengetopt_args_info local_args_info;

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = 1;
  optopt = '?';

  while (1)
    {
      int found = 0;
      int option_index = 0;
      char *stop_char;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 'V' },
        { "num-reqs",	1, NULL, 0 },
        { "use-threads",	0, NULL, 0 },
        { "daemon",	0, NULL, 0 },
        { "ss-pid",	1, NULL, 0 },
        { "ss-numbufs",	1, NULL, 0 },
        { "ss-bufsize",	1, NULL, 0 },
        { "ss-root",	1, NULL, 0 },
        { "ss-iolib",	1, NULL, 0 },
        { "ss-xfer-only",	0, NULL, 0 },
        { "ss-db-path",	1, NULL, 0 },
        { "ss-db-clear",	0, NULL, 0 },
        { "ss-db-recover",	0, NULL, 0 },
        { "verbose",	1, NULL, 0 },
        { "logfile",	1, NULL, 0 },
        { "tp-init-thread-count",	1, NULL, 0 },
        { "tp-min-thread-count",	1, NULL, 0 },
        { "tp-max-thread-count",	1, NULL, 0 },
        { "tp-low-watermark",	1, NULL, 0 },
        { "tp-high-watermark",	1, NULL, 0 },
        { "authr-pid",	1, NULL, 0 },
        { "authr-nid",	1, NULL, 0 },
        { "authr-cache-caps",	0, NULL, 0 },
        { NULL,	0, NULL, 0 }
      };

      stop_char = 0;
      c = getopt_long (argc, argv, "hV", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          cmdline_parser_print_help ();
          cmdline_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'V':	/* Print version and exit.  */
          cmdline_parser_print_version ();
          cmdline_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);


        case 0:	/* Long option with no short option */
          /* Number of requests before exit.  */
          if (strcmp (long_options[option_index].name, "num-reqs") == 0)
          {
            if (local_args_info.num_reqs_given)
              {
                fprintf (stderr, "%s: `--num-reqs' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->num_reqs_given && ! override)
              continue;
            local_args_info.num_reqs_given = 1;
            args_info->num_reqs_given = 1;
            args_info->num_reqs_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->num_reqs_orig)
              free (args_info->num_reqs_orig); /* free previous string */
            args_info->num_reqs_orig = gengetopt_strdup (optarg);
          }
          /* Flag to use threads for the server.  */
          else if (strcmp (long_options[option_index].name, "use-threads") == 0)
          {
            if (local_args_info.use_threads_given)
              {
                fprintf (stderr, "%s: `--use-threads' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->use_threads_given && ! override)
              continue;
            local_args_info.use_threads_given = 1;
            args_info->use_threads_given = 1;
            args_info->use_threads_flag = !(args_info->use_threads_flag);
          }
          /* Flag to run server as a daemon.  */
          else if (strcmp (long_options[option_index].name, "daemon") == 0)
          {
            if (local_args_info.daemon_given)
              {
                fprintf (stderr, "%s: `--daemon' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->daemon_given && ! override)
              continue;
            local_args_info.daemon_given = 1;
            args_info->daemon_given = 1;
            args_info->daemon_flag = !(args_info->daemon_flag);
          }
          /* The process ID to use for the server.  */
          else if (strcmp (long_options[option_index].name, "ss-pid") == 0)
          {
            if (local_args_info.ss_pid_given)
              {
                fprintf (stderr, "%s: `--ss-pid' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_pid_given && ! override)
              continue;
            local_args_info.ss_pid_given = 1;
            args_info->ss_pid_given = 1;
            args_info->ss_pid_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->ss_pid_orig)
              free (args_info->ss_pid_orig); /* free previous string */
            args_info->ss_pid_orig = gengetopt_strdup (optarg);
          }
          /* The number of I/O buffers to use on the server.  */
          else if (strcmp (long_options[option_index].name, "ss-numbufs") == 0)
          {
            if (local_args_info.ss_numbufs_given)
              {
                fprintf (stderr, "%s: `--ss-numbufs' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_numbufs_given && ! override)
              continue;
            local_args_info.ss_numbufs_given = 1;
            args_info->ss_numbufs_given = 1;
            args_info->ss_numbufs_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->ss_numbufs_orig)
              free (args_info->ss_numbufs_orig); /* free previous string */
            args_info->ss_numbufs_orig = gengetopt_strdup (optarg);
          }
          /* The size (in bytes) of an I/O buffer.  */
          else if (strcmp (long_options[option_index].name, "ss-bufsize") == 0)
          {
            if (local_args_info.ss_bufsize_given)
              {
                fprintf (stderr, "%s: `--ss-bufsize' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_bufsize_given && ! override)
              continue;
            local_args_info.ss_bufsize_given = 1;
            args_info->ss_bufsize_given = 1;
            args_info->ss_bufsize_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->ss_bufsize_orig)
              free (args_info->ss_bufsize_orig); /* free previous string */
            args_info->ss_bufsize_orig = gengetopt_strdup (optarg);
          }
          /* Path to root.  */
          else if (strcmp (long_options[option_index].name, "ss-root") == 0)
          {
            if (local_args_info.ss_root_given)
              {
                fprintf (stderr, "%s: `--ss-root' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_root_given && ! override)
              continue;
            local_args_info.ss_root_given = 1;
            args_info->ss_root_given = 1;
            if (args_info->ss_root_arg)
              free (args_info->ss_root_arg); /* free previous string */
            args_info->ss_root_arg = gengetopt_strdup (optarg);
            if (args_info->ss_root_orig)
              free (args_info->ss_root_orig); /* free previous string */
            args_info->ss_root_orig = gengetopt_strdup (optarg);
          }
          /* Which I/O library to use.  */
          else if (strcmp (long_options[option_index].name, "ss-iolib") == 0)
          {
            if (local_args_info.ss_iolib_given)
              {
                fprintf (stderr, "%s: `--ss-iolib' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if ((found = check_possible_values(optarg, cmdline_parser_ss_iolib_values)) < 0)
              {
                fprintf (stderr, "%s: %s argument, \"%s\", for option `--ss-iolib'%s\n", argv[0], (found == -2) ? "ambiguous" : "invalid", optarg, (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_iolib_given && ! override)
              continue;
            local_args_info.ss_iolib_given = 1;
            args_info->ss_iolib_given = 1;
            if (args_info->ss_iolib_arg)
              free (args_info->ss_iolib_arg); /* free previous string */
            args_info->ss_iolib_arg = gengetopt_strdup (cmdline_parser_ss_iolib_values[found]);
            if (args_info->ss_iolib_orig)
              free (args_info->ss_iolib_orig); /* free previous string */
            args_info->ss_iolib_orig = gengetopt_strdup (optarg);
          }
          /* A flag to only transfer data (no disk I/O).  */
          else if (strcmp (long_options[option_index].name, "ss-xfer-only") == 0)
          {
            if (local_args_info.ss_xfer_only_given)
              {
                fprintf (stderr, "%s: `--ss-xfer-only' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_xfer_only_given && ! override)
              continue;
            local_args_info.ss_xfer_only_given = 1;
            args_info->ss_xfer_only_given = 1;
            args_info->ss_xfer_only_flag = !(args_info->ss_xfer_only_flag);
          }
          /* Path to the object attribute database.  */
          else if (strcmp (long_options[option_index].name, "ss-db-path") == 0)
          {
            if (local_args_info.ss_db_path_given)
              {
                fprintf (stderr, "%s: `--ss-db-path' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_db_path_given && ! override)
              continue;
            local_args_info.ss_db_path_given = 1;
            args_info->ss_db_path_given = 1;
            if (args_info->ss_db_path_arg)
              free (args_info->ss_db_path_arg); /* free previous string */
            args_info->ss_db_path_arg = gengetopt_strdup (optarg);
            if (args_info->ss_db_path_orig)
              free (args_info->ss_db_path_orig); /* free previous string */
            args_info->ss_db_path_orig = gengetopt_strdup (optarg);
          }
          /* Clear the object attribute database before use.  */
          else if (strcmp (long_options[option_index].name, "ss-db-clear") == 0)
          {
            if (local_args_info.ss_db_clear_given)
              {
                fprintf (stderr, "%s: `--ss-db-clear' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_db_clear_given && ! override)
              continue;
            local_args_info.ss_db_clear_given = 1;
            args_info->ss_db_clear_given = 1;
            args_info->ss_db_clear_flag = !(args_info->ss_db_clear_flag);
          }
          /* Recover the object attribute database after a crash.  */
          else if (strcmp (long_options[option_index].name, "ss-db-recover") == 0)
          {
            if (local_args_info.ss_db_recover_given)
              {
                fprintf (stderr, "%s: `--ss-db-recover' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->ss_db_recover_given && ! override)
              continue;
            local_args_info.ss_db_recover_given = 1;
            args_info->ss_db_recover_given = 1;
            args_info->ss_db_recover_flag = !(args_info->ss_db_recover_flag);
          }
          /* Debug level of logger [0-5].  */
          else if (strcmp (long_options[option_index].name, "verbose") == 0)
          {
            if (local_args_info.verbose_given)
              {
                fprintf (stderr, "%s: `--verbose' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->verbose_given && ! override)
              continue;
            local_args_info.verbose_given = 1;
            args_info->verbose_given = 1;
            args_info->verbose_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->verbose_orig)
              free (args_info->verbose_orig); /* free previous string */
            args_info->verbose_orig = gengetopt_strdup (optarg);
          }
          /* Path to logfile.  */
          else if (strcmp (long_options[option_index].name, "logfile") == 0)
          {
            if (local_args_info.logfile_given)
              {
                fprintf (stderr, "%s: `--logfile' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->logfile_given && ! override)
              continue;
            local_args_info.logfile_given = 1;
            args_info->logfile_given = 1;
            if (args_info->logfile_arg)
              free (args_info->logfile_arg); /* free previous string */
            args_info->logfile_arg = gengetopt_strdup (optarg);
            if (args_info->logfile_orig)
              free (args_info->logfile_orig); /* free previous string */
            args_info->logfile_orig = gengetopt_strdup (optarg);
          }
          /* Initial number of thread in the pool.  */
          else if (strcmp (long_options[option_index].name, "tp-init-thread-count") == 0)
          {
            if (local_args_info.tp_init_thread_count_given)
              {
                fprintf (stderr, "%s: `--tp-init-thread-count' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->tp_init_thread_count_given && ! override)
              continue;
            local_args_info.tp_init_thread_count_given = 1;
            args_info->tp_init_thread_count_given = 1;
            args_info->tp_init_thread_count_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->tp_init_thread_count_orig)
              free (args_info->tp_init_thread_count_orig); /* free previous string */
            args_info->tp_init_thread_count_orig = gengetopt_strdup (optarg);
          }
          /* Minimum number of thread in the pool.  */
          else if (strcmp (long_options[option_index].name, "tp-min-thread-count") == 0)
          {
            if (local_args_info.tp_min_thread_count_given)
              {
                fprintf (stderr, "%s: `--tp-min-thread-count' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->tp_min_thread_count_given && ! override)
              continue;
            local_args_info.tp_min_thread_count_given = 1;
            args_info->tp_min_thread_count_given = 1;
            args_info->tp_min_thread_count_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->tp_min_thread_count_orig)
              free (args_info->tp_min_thread_count_orig); /* free previous string */
            args_info->tp_min_thread_count_orig = gengetopt_strdup (optarg);
          }
          /* Maximum number of thread in the pool.  */
          else if (strcmp (long_options[option_index].name, "tp-max-thread-count") == 0)
          {
            if (local_args_info.tp_max_thread_count_given)
              {
                fprintf (stderr, "%s: `--tp-max-thread-count' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->tp_max_thread_count_given && ! override)
              continue;
            local_args_info.tp_max_thread_count_given = 1;
            args_info->tp_max_thread_count_given = 1;
            args_info->tp_max_thread_count_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->tp_max_thread_count_orig)
              free (args_info->tp_max_thread_count_orig); /* free previous string */
            args_info->tp_max_thread_count_orig = gengetopt_strdup (optarg);
          }
          /* Request queue size at which threads are removed from the pool.  */
          else if (strcmp (long_options[option_index].name, "tp-low-watermark") == 0)
          {
            if (local_args_info.tp_low_watermark_given)
              {
                fprintf (stderr, "%s: `--tp-low-watermark' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->tp_low_watermark_given && ! override)
              continue;
            local_args_info.tp_low_watermark_given = 1;
            args_info->tp_low_watermark_given = 1;
            args_info->tp_low_watermark_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->tp_low_watermark_orig)
              free (args_info->tp_low_watermark_orig); /* free previous string */
            args_info->tp_low_watermark_orig = gengetopt_strdup (optarg);
          }
          /* Request queue size at which threads are added to the pool.  */
          else if (strcmp (long_options[option_index].name, "tp-high-watermark") == 0)
          {
            if (local_args_info.tp_high_watermark_given)
              {
                fprintf (stderr, "%s: `--tp-high-watermark' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->tp_high_watermark_given && ! override)
              continue;
            local_args_info.tp_high_watermark_given = 1;
            args_info->tp_high_watermark_given = 1;
            args_info->tp_high_watermark_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->tp_high_watermark_orig)
              free (args_info->tp_high_watermark_orig); /* free previous string */
            args_info->tp_high_watermark_orig = gengetopt_strdup (optarg);
          }
          /* PID of the authr server.  */
          else if (strcmp (long_options[option_index].name, "authr-pid") == 0)
          {
            if (local_args_info.authr_pid_given)
              {
                fprintf (stderr, "%s: `--authr-pid' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->authr_pid_given && ! override)
              continue;
            local_args_info.authr_pid_given = 1;
            args_info->authr_pid_given = 1;
            args_info->authr_pid_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->authr_pid_orig)
              free (args_info->authr_pid_orig); /* free previous string */
            args_info->authr_pid_orig = gengetopt_strdup (optarg);
          }
          /* NID of the authr server.  */
          else if (strcmp (long_options[option_index].name, "authr-nid") == 0)
          {
            if (local_args_info.authr_nid_given)
              {
                fprintf (stderr, "%s: `--authr-nid' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->authr_nid_given && ! override)
              continue;
            local_args_info.authr_nid_given = 1;
            args_info->authr_nid_given = 1;
            args_info->authr_nid_arg = strtol (optarg, &stop_char, 0);
            if (!(stop_char && *stop_char == '\0')) {
              fprintf(stderr, "%s: invalid numeric value: %s\n", argv[0], optarg);
              goto failure;
            }
            if (args_info->authr_nid_orig)
              free (args_info->authr_nid_orig); /* free previous string */
            args_info->authr_nid_orig = gengetopt_strdup (optarg);
          }
          /* Cache caps on the client.  */
          else if (strcmp (long_options[option_index].name, "authr-cache-caps") == 0)
          {
            if (local_args_info.authr_cache_caps_given)
              {
                fprintf (stderr, "%s: `--authr-cache-caps' option given more than once%s\n", argv[0], (additional_error ? additional_error : ""));
                goto failure;
              }
            if (args_info->authr_cache_caps_given && ! override)
              continue;
            local_args_info.authr_cache_caps_given = 1;
            args_info->authr_cache_caps_given = 1;
            args_info->authr_cache_caps_flag = !(args_info->authr_cache_caps_flag);
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */




  cmdline_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  return 0;

failure:
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}

static unsigned int
cmdline_parser_create_argv(const char *cmdline_, char ***argv_ptr, const char *prog_name)
{
  char *cmdline, *p;
  size_t n = 0, j;
  int i;

  if (prog_name) {
    cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
    cmd_line_list_tmp->next = cmd_line_list;
    cmd_line_list = cmd_line_list_tmp;
    cmd_line_list->string_arg = gengetopt_strdup (prog_name);

    ++n;
  }

  cmdline = gengetopt_strdup(cmdline_);
  p = cmdline;

  while (p && strlen(p))
    {
      j = strcspn(p, " \t");
      ++n;
      if (j && j < strlen(p))
        {
          p[j] = '\0';

          cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
          cmd_line_list_tmp->next = cmd_line_list;
          cmd_line_list = cmd_line_list_tmp;
          cmd_line_list->string_arg = gengetopt_strdup (p);

          p += (j+1);
          p += strspn(p, " \t");
        }
      else
        {
          cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
          cmd_line_list_tmp->next = cmd_line_list;
          cmd_line_list = cmd_line_list_tmp;
          cmd_line_list->string_arg = gengetopt_strdup (p);

          break;
        }
    }

  *argv_ptr = (char **) malloc((n + 1) * sizeof(char *));
  cmd_line_list_tmp = cmd_line_list;
  for (i = (n-1); i >= 0; --i)
    {
      (*argv_ptr)[i] = cmd_line_list_tmp->string_arg;
      cmd_line_list_tmp = cmd_line_list_tmp->next;
    }

  (*argv_ptr)[n] = NULL;

  free(cmdline);
  return n;
}

int
cmdline_parser_string(const char *cmdline, struct gengetopt_args_info *args_info, const char *prog_name)
{
  return cmdline_parser_string2(cmdline, args_info, prog_name, 0, 1, 1);
}

int
cmdline_parser_string2(const char *cmdline, struct gengetopt_args_info *args_info, const char *prog_name,
    int override, int initialize, int check_required)
{
  char **argv_ptr = 0;
  int result;
  unsigned int argc;
  
  argc = cmdline_parser_create_argv(cmdline, &argv_ptr, prog_name);
  
  result =
    cmdline_parser_internal (argc, argv_ptr, args_info, override, initialize, check_required, 0);
  
  if (argv_ptr)
    {
      free (argv_ptr);
    }

  free_cmd_list();
  
  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

